/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SitebodyRouteImport } from './routes/_sitebody'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SitebodyWhyRouteImport } from './routes/_sitebody/why'
import { Route as SitebodyServicesRouteImport } from './routes/_sitebody/services'
import { Route as SitebodyAboutRouteImport } from './routes/_sitebody/about'

const SitebodyRoute = SitebodyRouteImport.update({
  id: '/_sitebody',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SitebodyWhyRoute = SitebodyWhyRouteImport.update({
  id: '/why',
  path: '/why',
  getParentRoute: () => SitebodyRoute,
} as any)
const SitebodyServicesRoute = SitebodyServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => SitebodyRoute,
} as any)
const SitebodyAboutRoute = SitebodyAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => SitebodyRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof SitebodyAboutRoute
  '/services': typeof SitebodyServicesRoute
  '/why': typeof SitebodyWhyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof SitebodyAboutRoute
  '/services': typeof SitebodyServicesRoute
  '/why': typeof SitebodyWhyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_sitebody': typeof SitebodyRouteWithChildren
  '/_sitebody/about': typeof SitebodyAboutRoute
  '/_sitebody/services': typeof SitebodyServicesRoute
  '/_sitebody/why': typeof SitebodyWhyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/services' | '/why'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/services' | '/why'
  id:
    | '__root__'
    | '/'
    | '/_sitebody'
    | '/_sitebody/about'
    | '/_sitebody/services'
    | '/_sitebody/why'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SitebodyRoute: typeof SitebodyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_sitebody': {
      id: '/_sitebody'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SitebodyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_sitebody/why': {
      id: '/_sitebody/why'
      path: '/why'
      fullPath: '/why'
      preLoaderRoute: typeof SitebodyWhyRouteImport
      parentRoute: typeof SitebodyRoute
    }
    '/_sitebody/services': {
      id: '/_sitebody/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof SitebodyServicesRouteImport
      parentRoute: typeof SitebodyRoute
    }
    '/_sitebody/about': {
      id: '/_sitebody/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof SitebodyAboutRouteImport
      parentRoute: typeof SitebodyRoute
    }
  }
}

interface SitebodyRouteChildren {
  SitebodyAboutRoute: typeof SitebodyAboutRoute
  SitebodyServicesRoute: typeof SitebodyServicesRoute
  SitebodyWhyRoute: typeof SitebodyWhyRoute
}

const SitebodyRouteChildren: SitebodyRouteChildren = {
  SitebodyAboutRoute: SitebodyAboutRoute,
  SitebodyServicesRoute: SitebodyServicesRoute,
  SitebodyWhyRoute: SitebodyWhyRoute,
}

const SitebodyRouteWithChildren = SitebodyRoute._addFileChildren(
  SitebodyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SitebodyRoute: SitebodyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
